{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Development/JavaScript-Learn/ReactJS/To-do-list/src/App.js\";\nimport React, { PureComponent } from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst isNotCheckedAll = (todos = []) => todos.find(todo => todo.isCompleted);\n\nconst filterByStatus = (todos = [], status = '', id = '') => {\n  switch (status) {\n    case 'ACTIVE':\n      return todos.filter(todo => !todo.isCompleted);\n\n    case 'COMPLETED':\n      return todos.filter(todo => todo.isCompleted);\n\n    case 'REMOVE':\n      return todos.filter(tdo => todo.id !== id);\n\n    default:\n      return todos;\n  }\n};\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todoList: [{\n        id: 1,\n        text: 'todo 1',\n        isCompleted: true\n      }, {\n        id: 2,\n        text: 'todo 2',\n        isCompleted: false\n      }],\n      todoEditingId: '',\n      isNotCheckedAll: false\n    };\n\n    this.addTodo = (todo = {}) => {\n      this.setState(preState => ({\n        todoList: [...preState.todoList, todo]\n      }));\n    };\n\n    this.getTodoEditingId = (id = '') => {\n      this.setState({\n        todoEditingId: id\n      });\n    };\n\n    this.onEditTodo = (todo = {}, index = -1) => {\n      if (index >= 0) {\n        const {\n          todoList: list\n        } = this.state;\n        list.splice(index, 1, todo);\n        this.setState({\n          todoList: list,\n          todoEditingId: ''\n        });\n      }\n    };\n\n    this.markCompleted = (id = '') => {\n      const {\n        todoList\n      } = this.state;\n      const updatedList = todoList.map(todo => todo.id === id ? { ...todo,\n        isCompleted: !todo.isCompleted\n      } : todo);\n      this.setState(preState => ({\n        todoList: updatedList,\n        isCheckedAll: isNotCheckedAll(updatedList)\n      }));\n    };\n\n    this.checkAllTodo = () => {\n      const {\n        todoList,\n        isCheckedAll\n      } = this.state;\n      this.setState(preState => ({\n        todoList: todoList.map(todo => ({ ...todo,\n          isCompleted: !isCheckedAll\n        })),\n        isCheckedAll: !preState.isCheckedAll\n      }));\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      isCheckedAll: !isNotCheckedAll(this.state.todoList)\n    });\n  }\n\n  render() {\n    const {\n      todoList,\n      todoEditingId,\n      isCheckedAll\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      addTodo: this.addTodo,\n      isCheckedAll: isCheckedAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(ToDoList, {\n      todoList: todoList,\n      getTodoEditingId: this.getTodoEditingId,\n      todoEditingId: todoEditingId,\n      onEditTodo: this.onEditTodo,\n      markComplete: this.markCompleted,\n      isCheckedAll: isCheckedAll,\n      checkAllTodo: this.checkAllTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Documents/Development/JavaScript-Learn/ReactJS/To-do-list/src/App.js"],"names":["React","PureComponent","ToDoList","Header","Footer","isNotCheckedAll","todos","find","todo","isCompleted","filterByStatus","status","id","filter","tdo","App","state","todoList","text","todoEditingId","addTodo","setState","preState","getTodoEditingId","onEditTodo","index","list","splice","markCompleted","updatedList","map","isCheckedAll","checkAllTodo","componentWillMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgBA,KAAK,CAACC,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,WAAxB,CAAxC;;AACA,MAAMC,cAAc,GAAG,CAACJ,KAAK,GAAG,EAAT,EAAaK,MAAM,GAAG,EAAtB,EAA0BC,EAAE,GAAE,EAA9B,KAAqC;AAC1D,UAAOD,MAAP;AACE,SAAK,QAAL;AACE,aAAOL,KAAK,CAACO,MAAN,CAAaL,IAAI,IAAI,CAACA,IAAI,CAACC,WAA3B,CAAP;;AACF,SAAK,WAAL;AACE,aAAOH,KAAK,CAACO,MAAN,CAAaL,IAAI,IAAIA,IAAI,CAACC,WAA1B,CAAP;;AACF,SAAK,QAAL;AACE,aAAOH,KAAK,CAACO,MAAN,CAAaC,GAAG,IAAIN,IAAI,CAACI,EAAL,KAAWA,EAA/B,CAAP;;AACA;AACA,aAAON,KAAP;AARJ;AAUD,CAXD;;AAYA,MAAMS,GAAN,SAAkBd,aAAlB,CAAgC;AAAA;AAAA;AAAA,SAC9Be,KAD8B,GACtB;AACNC,MAAAA,QAAQ,EAAE,CACR;AACAL,QAAAA,EAAE,EAAE,CADJ;AAEAM,QAAAA,IAAI,EAAE,QAFN;AAGAT,QAAAA,WAAW,EAAE;AAHb,OADQ,EAMV;AACEG,QAAAA,EAAE,EAAE,CADN;AAEEM,QAAAA,IAAI,EAAE,QAFR;AAGET,QAAAA,WAAW,EAAE;AAHf,OANU,CADJ;AAaRU,MAAAA,aAAa,EAAE,EAbP;AAcRd,MAAAA,eAAe,EAAE;AAdT,KADsB;;AAAA,SAuB9Be,OAvB8B,GAuBpB,CAACZ,IAAI,GAAG,EAAR,KAAe;AACvB,WAAKa,QAAL,CAAcC,QAAQ,KAAK;AACzBL,QAAAA,QAAQ,EAAE,CAAC,GAAGK,QAAQ,CAACL,QAAb,EAAuBT,IAAvB;AADe,OAAL,CAAtB;AAGD,KA3B6B;;AAAA,SA4B9Be,gBA5B8B,GA4BX,CAACX,EAAE,GAAG,EAAN,KAAa;AAC9B,WAAKS,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAEP;AADH,OAAd;AAGD,KAhC6B;;AAAA,SAkC9BY,UAlC8B,GAkCjB,CAAChB,IAAI,GAAG,EAAR,EAAYiB,KAAK,GAAG,CAAC,CAArB,KAA2B;AACtC,UAAGA,KAAK,IAAG,CAAX,EAAe;AACb,cAAM;AAAER,UAAAA,QAAQ,EAAES;AAAZ,YAAqB,KAAKV,KAAhC;AACAU,QAAAA,IAAI,CAACC,MAAL,CAAYF,KAAZ,EAAmB,CAAnB,EAAsBjB,IAAtB;AACA,aAAKa,QAAL,CAAc;AACZJ,UAAAA,QAAQ,EAAES,IADE;AAEZP,UAAAA,aAAa,EAAE;AAFH,SAAd;AAID;AACF,KA3C6B;;AAAA,SA6C9BS,aA7C8B,GA6Cd,CAAEhB,EAAE,GAAE,EAAN,KAAY;AAC1B,YAAM;AAAEK,QAAAA;AAAF,UAAc,KAAKD,KAAzB;AACA,YAAMa,WAAW,GAAGZ,QAAQ,CAACa,GAAT,CAAatB,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAAZ,GAAkB,EAAC,GAAGJ,IAAJ;AAAUC,QAAAA,WAAW,EAAE,CAACD,IAAI,CAACC;AAA7B,OAAlB,GAA+DD,IAApF,CAApB;AACA,WAAKa,QAAL,CAAcC,QAAQ,KAAK;AACzBL,QAAAA,QAAQ,EAAEY,WADe;AAEzBE,QAAAA,YAAY,EAAE1B,eAAe,CAACwB,WAAD;AAFJ,OAAL,CAAtB;AAID,KApD6B;;AAAA,SAsD9BG,YAtD8B,GAsDf,MAAM;AACnB,YAAM;AAACf,QAAAA,QAAD;AAAWc,QAAAA;AAAX,UAA2B,KAAKf,KAAtC;AACA,WAAKK,QAAL,CAAcC,QAAQ,KAAK;AACzBL,QAAAA,QAAQ,EAAEA,QAAQ,CAACa,GAAT,CAAatB,IAAI,KAAK,EAAC,GAAGA,IAAJ;AAAUC,UAAAA,WAAW,EAAE,CAACsB;AAAxB,SAAL,CAAjB,CADe;AAEzBA,QAAAA,YAAY,EAAE,CAACT,QAAQ,CAACS;AAFC,OAAL,CAAtB;AAID,KA5D6B;AAAA;;AAkB9BE,EAAAA,kBAAkB,GAAG;AACnB,SAAKZ,QAAL,CAAc;AACZU,MAAAA,YAAY,EAAE,CAAC1B,eAAe,CAAC,KAAKW,KAAL,CAAWC,QAAZ;AADlB,KAAd;AAGD;;AAwCDiB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEjB,MAAAA,QAAF;AAAYE,MAAAA,aAAZ;AAA2BY,MAAAA;AAA3B,QAA4C,KAAKf,KAAvD;AACA,wBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,MAAD;AACE,MAAA,OAAO,EAAI,KAAKI,OADlB;AAEE,MAAA,YAAY,EAAIW,YAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAKA,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAEd,QADZ;AAEE,MAAA,gBAAgB,EAAI,KAAKM,gBAF3B;AAGE,MAAA,aAAa,EAAIJ,aAHnB;AAIE,MAAA,UAAU,EAAI,KAAKK,UAJrB;AAKE,MAAA,YAAY,EAAI,KAAKI,aALvB;AAME,MAAA,YAAY,EAAIG,YANlB;AAOE,MAAA,YAAY,EAAI,KAAKC,YAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,eAcA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,CADF,CADA;AAoBH;;AApF+B;;AAuFhC,eAAejB,GAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst isNotCheckedAll = (todos = []) => todos.find(todo => todo.isCompleted)\nconst filterByStatus = (todos = [], status = '', id ='') => {\n  switch(status) {\n    case 'ACTIVE': \n      return todos.filter(todo => !todo.isCompleted)\n    case 'COMPLETED': \n      return todos.filter(todo => todo.isCompleted)\n    case 'REMOVE':\n      return todos.filter(tdo => todo.id !==id)\n      default: \n      return todos\n  }\n}\nclass App extends PureComponent {\n  state = {\n    todoList: [\n      {\n      id: 1,\n      text: 'todo 1',\n      isCompleted: true\n    },\n    {\n      id: 2,\n      text: 'todo 2',\n      isCompleted: false\n    }\n  ],\n  todoEditingId: '',\n  isNotCheckedAll: false\n  }\n\n  componentWillMount() {\n    this.setState({\n      isCheckedAll: !isNotCheckedAll(this.state.todoList)\n    })\n  }\n  addTodo = (todo = {}) => {\n    this.setState(preState => ({\n      todoList: [...preState.todoList, todo]\n    }))\n  }\n  getTodoEditingId = (id = '') => {\n    this.setState({\n      todoEditingId: id\n    })\n  } \n  \n  onEditTodo = (todo = {}, index = -1) => {\n    if(index >=0 ) {\n      const { todoList: list } = this.state\n      list.splice(index, 1, todo)\n      this.setState({\n        todoList: list,\n        todoEditingId: ''\n      })\n    }\n  }\n\n  markCompleted = ( id ='') =>{\n    const { todoList} = this.state\n    const updatedList = todoList.map(todo => todo.id === id ? ({...todo, isCompleted: !todo.isCompleted}) : todo )\n    this.setState(preState => ({\n      todoList: updatedList,\n      isCheckedAll: isNotCheckedAll(updatedList)\n    }))\n  }\n\n  checkAllTodo = () => {\n    const {todoList, isCheckedAll} = this.state\n    this.setState(preState => ({\n      todoList: todoList.map(todo => ({...todo, isCompleted: !isCheckedAll })),\n      isCheckedAll: !preState.isCheckedAll\n    }))\n  }\n\n  render (){\n    const { todoList, todoEditingId, isCheckedAll } = this.state\n    return (\n    <div className=\"App\">\n      <section>\n      <Header \n        addTodo = {this.addTodo}\n        isCheckedAll = {isCheckedAll}\n      />\n      <ToDoList \n        todoList={todoList}\n        getTodoEditingId = {this.getTodoEditingId}\n        todoEditingId = {todoEditingId}\n        onEditTodo = {this.onEditTodo}\n        markComplete = {this.markCompleted}\n        isCheckedAll = {isCheckedAll}\n        checkAllTodo = {this.checkAllTodo}\n      />\n      <Footer />\n      </section>\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}